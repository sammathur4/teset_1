# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out code
        uses: actions/checkout@v3
      # - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          python3 -m pip install 
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test application
        run: |
          python teset.py

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.


  DeployDev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    environment:
      name: Development

    steps:

      - name: Deploy
        run: echo I am deploying the api to AWS

      - name: Deploy in EC2
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
          HOST_NAME : ${{ secrets.HOST_NAME  }}
          USER_NAME : ${{ secrets.USER_NAME  }}
          USER_PASSWORD: ${{ secrets.USER_PASSWORD }}
          APP_DIR: ${{secrets.APP_DIR}}
          SERVICE_NAME: ${{secrets.SERVICE_NAME}}

        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} "
            cd ${APP_DIR} &&
            git pull &&
            echo ${USER_PASSWORD} | sudo -S systemctl restart ${SERVICE_NAME} "
  Test-Remote:
    name: Test Remote Deployment
    needs: [DeployDev]
    runs-on: ubuntu-latest
    environment:
      name: Development

    steps:
    - name: Test application
      run: |
        sleep 5
        curl ${{ secrets.HOST_NAME  }}:${{ secrets.PORT  }} | grep "template api"
